@page "/users2"

@using CSP.Core.Command;
@using CSP.Core.Query;
@using CSP.MainApp.Model;
@using CSP.ModuleContracts
@using System.Net.Http.Headers;
@using Newtonsoft.Json; 
@using System.Net;
@using CSP.Core;

@inject NavigationManager _navigationManager
@inject ICommandDispatcher _commandInvoker
@inject IQueryDispatcher _queryDispatcher 
@*@inject ICommandQuerySerializer _serializer*@
 
<h1>Users example</h1>

<p>This component demonstrates fetching data from a user service (JS bridge/CQRS pattern).</p>

@if (users == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<EditForm Model="@userModel" OnValidSubmit="@HandleValidSubmit">
		<InputText id="firstName" @bind-Value="userModel.FirstName" />
		<InputText id="lastName" @bind-Value="userModel.LastName" />
	
		<br/>
		<button type="submit">Add</button>
	</EditForm>

	<table class="table">
		<thead>
			<tr>
				<th>Id</th>
				<th>First name</th> 
				<th>Last name</th> 
			</tr>
		</thead>
		<tbody>
			@foreach (var user in users)
			{
				<tr>
					 <td>@user.Id</td>
					 <td>@user.FirstName</td>
					 <td>@user.LastName</td>
					 <td><button type="button" @onclick="() => OnDeleteClicked(user)">Delete</button></td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private User[] users;
	private User userModel = new User();

	public record AddUserCommand(string FirstName, string LastName);
	public record DeleteUserCommand(long UserId);


	protected override async Task OnInitializedAsync()
	{ 
		var resp = _queryDispatcher.Invoke("getAllUsers", null);
		var result = JsonConvert.DeserializeObject<List<User>>(resp);
		users = await Task.FromResult(result.ToArray());
	} 

	private async Task HandleValidSubmit()
	{
		var addUserCommand = new AddUserCommand(userModel.FirstName, userModel.LastName);
		var jsonObject = System.Text.Json.JsonSerializer.Serialize(@addUserCommand);  

		var result = _commandInvoker.Invoke("addUser", jsonObject);
		_navigationManager.NavigateTo("users2", true);
	}

	private async void OnDeleteClicked(User user)
	{
		var deleteUserCommand = new DeleteUserCommand(user.Id);
		var jsonObject = System.Text.Json.JsonSerializer.Serialize(@deleteUserCommand);  

		var result = _commandInvoker.Invoke("deleteUser", jsonObject);
		_navigationManager.NavigateTo("users2", true);
	}
}
